{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOi2JM0OmBszTD9HSkS2Vvg",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/OJB-Quantum/Notebooks-for-Ideas/blob/main/Tile_an_Image_into_3x3_17x11_Inch_Each.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cfav_UWcl-hC",
        "outputId": "3a66e9bc-6247-4311-e866-374929bb6cde"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['/content/Yes/1.png',\n",
              " '/content/Yes/2.png',\n",
              " '/content/Yes/3.png',\n",
              " '/content/Yes/4.png',\n",
              " '/content/Yes/5.png',\n",
              " '/content/Yes/6.png',\n",
              " '/content/Yes/7.png',\n",
              " '/content/Yes/8.png',\n",
              " '/content/Yes/9.png']"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "from PIL import Image\n",
        "\n",
        "# Load the image\n",
        "image_path = '/content/Onri_Jay_Benally_GOMACTech2024_Poster-1.png'\n",
        "original_image = Image.open(image_path)\n",
        "\n",
        "# Set the DPI for the tiles\n",
        "dpi = 400\n",
        "\n",
        "# Set the size for each tile in inches\n",
        "tile_width_inch = 17\n",
        "tile_height_inch = 11\n",
        "\n",
        "# Calculate the size of each tile in pixels\n",
        "tile_width = int(tile_width_inch * dpi)\n",
        "tile_height = int(tile_height_inch * dpi)\n",
        "\n",
        "# Calculate the number of tiles in both dimensions\n",
        "num_tiles_x = 3\n",
        "num_tiles_y = 3\n",
        "\n",
        "# Function to crop the image into tiles\n",
        "def crop_into_tiles(image, num_tiles_x, num_tiles_y, tile_width, tile_height):\n",
        "    tiles = []\n",
        "    for i in range(num_tiles_y):\n",
        "        for j in range(num_tiles_x):\n",
        "            left = j * tile_width\n",
        "            top = i * tile_height\n",
        "            right = left + tile_width\n",
        "            bottom = top + tile_height\n",
        "            tile = image.crop((left, top, right, bottom))\n",
        "            tiles.append(tile)\n",
        "    return tiles\n",
        "\n",
        "# Calculate the size for the full image to be tiled\n",
        "full_width = tile_width * num_tiles_x\n",
        "full_height = tile_height * num_tiles_y\n",
        "\n",
        "# Resize the image to the full size\n",
        "resized_image = original_image.resize((full_width, full_height))\n",
        "\n",
        "# Crop the resized image into tiles\n",
        "tiles = crop_into_tiles(resized_image, num_tiles_x, num_tiles_y, tile_width, tile_height)\n",
        "\n",
        "# Save the tiles and keep track of the paths\n",
        "tile_paths = []\n",
        "for i, tile in enumerate(tiles):\n",
        "    tile_path = f'/content/Yes/{i+1}.png'\n",
        "    tile.save(tile_path, dpi=(dpi, dpi))\n",
        "    tile_paths.append(tile_path)\n",
        "\n",
        "tile_paths\n"
      ]
    }
  ]
}
